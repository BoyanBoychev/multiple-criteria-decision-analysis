import numpy as np
from core.core import DecisionMatrix, Pairwise
from methods.topsis import Topsis


#This version needs to be improved and implemented so that it works like the other methods.

# ---------------------------------------------CLASS_TOPSIS_PAIRWISE_V2_START--------------------------------------
class TopsisPairwise:
    def __init__(self, decision_matrix: DecisionMatrix):
        self.decision_matrix = decision_matrix
        self.weights = None

    def calculate_topsisPairwise(self):
        # setup comparisons in the form of: (criteria1, criteria2, weight)
        comparisons = [(0, 1, 0.1), (0, 2, 0.3), (1, 2, 0.5)]
        pairwise_comparison = Pairwise(self.decision_matrix.crit_count)
        for crit1, crit2, weight in comparisons:
            pairwise_comparison.setComparson(crit1, crit2, weight)
        
        # calculate weights
        self.weights = pairwise_comparison.Eigen()

        # continue with calculation as before
        self.decision_matrix.normalize()
        weighted_normalized_matrix = self.decision_matrix.normalized_matrix * self.weights
        
        ideal_positive = np.max(weighted_normalized_matrix, axis=0)
        ideal_negative = np.min(weighted_normalized_matrix, axis=0)

        positive_distances = np.linalg.norm(weighted_normalized_matrix - ideal_positive, axis=1)
        negative_distances = np.linalg.norm(weighted_normalized_matrix - ideal_negative, axis=1)

        scores = negative_distances / (negative_distances + positive_distances)
        best_alternative_index = np.argmax(scores)

        return scores, self.decision_matrix.alternatives[best_alternative_index].name, best_alternative_index
# ---------------------------------------------CLASS_TOPSIS_PAIRWISE_V2_END----------------------------------------